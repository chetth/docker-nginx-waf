worker_processes auto;
daemon off;

events {
    worker_connections  200000; 
    use epoll;
    multi_accept on;
}

worker_rlimit_nofile 200000;
error_log logs/error.log;

http {
    init_by_lua_block {
        -- use resty.core for performance improvement, see the status note above
        require "resty.core"

        -- require the base module
        local lua_resty_waf = require "resty.waf"

        -- perform some preloading and optimization
        lua_resty_waf.init()
    }

    # Caches information about open FDs, freqently accessed files.
    # Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
    # I recommend using some varient of these options, though not the specific values listed below.
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 30;

    # Number of requests a client can make over the keep-alive connection. This is set high for testing.
    keepalive_requests 100000;

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 10;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 2;

    # Compression. Reduces the amount of data that needs to be transferred over the network
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_disable "MSIE [1-6]\.";
    gzip_types        image/gif text/plain text/css image/x-icon application/x-perl application/x-httpd-cgi application/x-javascript text/javascript image/png image/x-ms-bmp application/x-font-ttf application/vnd.ms-fontobject  application/font-woff font/opentype font/ttf;
    gzip_vary         on;

    large_client_header_buffers 8 1200k;
    client_header_buffer_size 1200k;
    client_max_body_size 0;
    client_body_buffer_size 1200k;
    proxy_headers_hash_max_size 512;
    proxy_headers_hash_bucket_size 256;
    server_names_hash_bucket_size 64;
    proxy_buffers 4 256k;
    proxy_buffer_size 128k; 
    proxy_busy_buffers_size 256k;

    include       mime.types;
    default_type  application/octet-stream;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status  "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    lua_package_path   "/opt/openresty/lualib/?.lua;;";
    access_log logs/access.log main buffer=16k;

    server {
      listen 80 default_server;
      location / {
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        root                    html;
      }
    }

    include sites/*.conf;

}
