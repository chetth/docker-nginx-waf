server {
        listen       80 default_server;

        charset utf-8;
        client_max_body_size    0;
        client_header_timeout   360;
        client_body_timeout     360;
        fastcgi_read_timeout    360;
        keepalive_timeout       360;
        proxy_ignore_client_abort on;
        send_timeout            360;
        lingering_timeout       360;

        error_page   500 502 503 504  /50x.html;
        location = /favicon.ico { log_not_found off; }
        location = /50x.html {
            root   html;
        }
        root    html;
        index   index.html;

        location / {
	            access_by_lua_block {
			local lua_resty_waf = require "resty.waf"

			local waf = lua_resty_waf:new()

			-- define options that will be inherited across all scopes
			waf:set_option("debug", true)
			waf:set_option("mode", "ACTIVE")

			-- this may be desirable for low-traffic or testing sites
			-- by default, event logs are not written until the buffer is full
			-- for testing, flush the log buffer every 5 seconds
			--
			-- this is only necessary when configuring a remote TCP/UDP
			-- socket server for event logs. otherwise, this is ignored
			waf:set_option("event_log_periodic_flush", 5)

                        waf:set_option("event_log_target", "file")
                        waf:set_option("event_log_target_path", "/tmp/events.log")

                        -- Declare the log level
                        waf:set_option("debug_log_level", ngx.DEBUG)
                        waf:set_option("event_log_altered_only", false)
                        waf:set_option("event_log_request_arguments", true)
                        waf:set_option("event_log_request_body", true)
                        waf:set_option("event_log_verbosity", 4)

                        -- Set ignored rule set for testing
                        -- waf:set_option("ignore_ruleset", 40000)

			-- run the firewall
			waf:exec()
		    }

		    header_filter_by_lua_block {
			local lua_resty_waf = require "resty.waf"

			-- note that options set in previous handlers (in the same scope)
			-- do not need to be set again
			local waf = lua_resty_waf:new()

			waf:exec()
		    }

		    body_filter_by_lua_block {
			local lua_resty_waf = require "resty.waf"

			local waf = lua_resty_waf:new()

			waf:exec()
		    }

		    log_by_lua_block {
			local lua_resty_waf = require "resty.waf"

			local waf = lua_resty_waf:new()

			waf:exec()
		    }

        }
}
